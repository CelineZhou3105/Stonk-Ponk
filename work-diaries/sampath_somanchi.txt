Week 1: 
This week I accepted the position of backend engineer on this project. I have engaged in conversations with my team on how the architecture and tech stack would look like. As part of my role deliverable I have indentified data sources from which we can pull financial data on US stocks. 

We have also set up a Git Lab repo to store all of our work. I have set up a vs code environment on which I will be working. 

Week 2: 
We set up an in-person team meeting to iron out details. WE agreed upon the architecture and the fact that we will be using an API to connect the front end and the back end. A round table discussion was held to determine what features were most important to us and the product. We examined the different products which exist in the market and attempted to work out the novel features we could implement in our application. We made design decisions too. We determined that the product should have a simple look and feel to it. We determined that our target audience will be new investors with minimal knowledge of the stock market.   

Week 3: 
This week we began doing feasibility tests to see which data sets we could access and began setting up our first sprint. The focus of the first sprint was to create our code base, complete user authentication work and connect the front end to the backend. I worked with Ash to set up mongoDB as our backend user database. This involved a lot of package installations and testing across different platforms (OSX, Win10, Unix). We implemented the database funtionalities to store username and password, and check if a user is a valid user. I was designated to backend with Kevin and Ash. Celine and Rachel were incharge of front end. 

Week 4: 
Going into week 4 we realised that, in order to implement jwt tokens we would have to use the Django framework. This was bought to our attention by Kevin. To resolve this matter we had to rewrite the entire backend including the database. Django apps were used and more structure was introduced to the backend. I assisted in checking the functionalites of the transition, ensuring that the code was doing what it was supposed to. With the new Django framework, structure was introduced in connecting the frontend to the backend. The frontend were making dummy calls to the backend to test functionality. This week I also worked on identifying where we will be recieveing market data from. I also worked with Celine to indentify which data points were needed and their format.

Week 5: 
Going into demoA the team worked on ensuring that the front end and backend were properly routed. An issue that we found was that a lack of communication between front end and backend meant that the usage of the api calls to the backend was understood and implemented differently. We got into a team call and resolved this issue. After our presentation, we had out team retro and we decided on things we could improve on as well as evaluate what went well. I took on the responsibility to try have programming sessions in person, as I felt that we could program faster and have more fun working together in real life as opposed to over discord. This week I settled on using the yahoo_fin api to pull data from and the format in which I would pass the pulled data to the front end. I recieve the data in the form a pandas dataframe and then extract the necessary fields. An issue that I ran into approaching the weekend was that I could only pull market data for US stocks. Whilst I could get ticker information for ASX stocks, I need to figure out a way to pull ASX market data like I do NYSE, DOW and NSDQ data.   

Week 6: 
Going into the week 6 break, I took the opportunity to implement individual stock data. I combined the API calls for each stock's quote data and past price data into dictionary. I then worked with Rachel on the frontend to help implement it. I also wrote the historical price function which got the price data for any given date for a stock. I tried to work on my retro A task of trying to get the team to work in persona again, but it could not happen. We decided to continue working over discord. I had some difficulties with pythons datetime function when getting stock data. This needs to be resolved. The function works half of the time. This week I also defined the health metrics for portfolio health. 

Week 7: 
This week I attempted to place our porject on AWS. Whilst I was successful in placing the backend on AWS, I was unable to install npm as necessary to run the project. After spending a couple of days on this I let it go. I refactored the market data API such that gainers, losers and most active stocks can be called from the same function. This week I also worked with the team to help design the portfolio table and provide the API endpoints to populate the price column, %change column , and performance chart per owned stock. I also began looking at news api's to find a way to help users get news about a certain stock or market stocks to help them make more informed purchasing decisions.

Week 8: 
This week we had the presentation. The team decided that I would present this week alongside Celine. Before the demo, I implmented the news API using googlenews. The API was made such that news could be called for the market most actives and for an individual stock. I also was given the responsility to populate the education modules with data given my finance background. This week I faced the challenges of having to simplify financial data so that it could be clearly understood by the reader. I also had to ensure that I did not reword any important concepts in a way which could mislead the user. I also had to be conserevative with the News API as GoogleNews has an api call limit. Before the presentation, we had a demo run with the team which was very beneficial. Celine shared her screen and displayed the user action flows as I talked through them. The practice run was very beneficial and helped us clean up our presentation. 

Week 9: 
This week I took it upon myself to refactor all pieces of code which were not reliable. I tested the get_prices and historical_prices functions to understand why they were failing, and found that the API call to get prices was in a "mm-dd-yy" format. This was comunicated clearly in the documentation and caused errors when I was passing in dates in "dd-mm-yy" format. I also found that the yahoo finance API has a news module, which did not have api call limits like google news. Because of this, I implemented the yahoo finance news api into our program, and left google news to be a backup API. On Friday the team met up in person for the first time. We spent the whole day working on the assignment and fixing bugs. I worked with Rachel to implement the new yahoo finance news module on the front end. I also worked with Kevin to implement the portfolio metrics defined in Week 6. I also wrote out the suggestions which are to be shown for each range of portfolio health metric outcomes, to be implemented by Kevin.

Week 10:
At the start of week 10, I realised that it was a requirement to have a back up API incase our main API went down. Based on Kevin's idea, I implemented an API interface class which could have multiple API modules be connected to it. As such I created a StockApiInterface (with yahoo finance and alphavantage as sub modules API's) and a NewsApiInterface (with yahoo finance and google news as sub module API's). I designed each sub API module so that they would have the same parent functions, implemented differently. I chose to implement the API's in a way so that they could be cross referenced. The admin page can set the priority for which API will be used first. If the chosen API fails to answer a request, the secondary API will be invoked to resolve it. I alos implemented a ForexApiInterface (with yahoo finance and alphavantage as the back up API's) and housed all of the API interfaces into one django module. The biggest challenge I faced here was that our product was made around the yahoo finance API. I had to implement the new API's to match the output of the yahoo finance API modules. This week I also implemented Tax information in the education page, as well as a glossary. I worked with Rachel to implement the "What if I Buy?" and "What if I sell?" modals for the portfolio page. This was placed to help users understand the tax, and portfolio value implications of selling and buying shares. We ran through the final demo, and began working on the final report.   